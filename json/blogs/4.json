{"id":"4","title":"4番目のタイトル","imageUrl":"https://github.com/savanakurashi/resources/blob/main/img/blogs/default.jpg?raw=true","shortText":"4番目のメッセージだよ〜","content":"## これは何？\r\n\r\n自動テストとは何か、どのように書くのかを **出来るだけ簡単に書いた記事** です。\r\n自動テストの入門には `RSpec` などのフレームワークの使い方や導入が先にくる記事が多いため、\r\n今回はそうした **テストフレームワークを使わずに自動テストの実践** をしていきたいと思います。\r\n\r\n### 対象者\r\n\r\n* 自動テストに障壁がある、自動テストをまったく知らない、書いたことがない、という方\r\n\r\n###  読んで期待するところ\r\n\r\n* 自動テストを自分でも書いてみようと思ってくれると嬉しいです\r\n\r\n## 自動テストの定義\r\n\r\nこの記事では自動テストを以下のように定義します\r\n\r\n* 対象のプログラム(A)が、期待通りに動いていることを検証するためのプログラム(B)を作成する\r\n  * Aを `プロダクトコード`, B を `テストコード` と名前をつけます\r\n* テストコードを実行してプロダクトコードが期待通りに動いていることをテストする\r\n  * これを **自動テストと定義** します\r\n\r\n## 簡単な目次・流れ\r\n\r\n* 初めに `FizzBazz` のプロダクトコードを作成し動作確認をします\r\n* 上記の `FizzBazz` に対してテストコードを作成し、実行します\r\n* テストコードの出力結果を見やすいようにリファクタをします\r\n* 最後に付録で `RSpec` で書き換えたバージョンを記載しています\r\n\r\n## `プロダクトコード` の記載\r\n\r\nみんな大好き Ruby で以下を実現できるプログラムを作成します。\r\n\r\n* 渡された数が 3 の倍数のとき 「Fizz」 という文字列を返す\r\n* 渡された数が 5 の倍数のとき 「Bazz」 という文字列を返す\r\n\r\n### クラスの用意\r\n\r\n`FizzBazz` クラスを作成し、上記の仕様を実現するメソッド `fizz_bazz` を作ります\r\n返す文字列を判定するための受け取る数は `num` という名前で受け取ることにします\r\nファイル名は `fizz_bazz.rb` という名前で保存をしておきましょう\r\n\r\n```fizz_bazz.rb\r\nclass FizzBazz\r\n  def self.fizz_bazz(num)\r\n  end\r\nend\r\n```\r\n\r\nこれで以下のようにプログラムを実行して動作確認ができるようになりました。\r\n\r\n```ruby\r\nFizzBazz.fizz_bazz(1)\r\n#=\u003e 結果\r\n```\r\n\r\n\r\n### 中身の実装\r\n\r\n仕様通りに `fizz_bazz` を実装します\r\n\r\n```fizz_bazz.rb\r\nclass FizzBazz\r\n  def self.fizz_bazz(num)\r\n    if num % 3 == 0\r\n      \"Fizz\"\r\n    elsif num % 5 == 0\r\n      \"Bazz\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nこれでとりあえず `プロダクトコード` が実装できました。\r\n\r\n## テストする\r\n\r\nではこのクラスの動作確認をしてみます。\r\n以下のようにプログラムを実行できる `fizz_bazz_test.rb` スクリプトを用意します。\r\n\r\n```fizz_bazz_test.rb\r\n#! /usr/bin/ruby\r\n\r\n# FizzBazzクラスを相対パスで読み込む\r\nrequire_relative \"fizz_bazz\"\r\n\r\n# FizzBazz.fizz_bazz の結果を受け取る\r\nresult = FizzBazz.fizz_bazz(3)\r\n# 結果をコマンドラインに出力する\r\nputs result\r\n```\r\n\r\n用意ができたら実行をしてみます。\r\n今回は `FizzBazz.fizz_bazz` に 3 という数字を渡しているので `Fizz` という結果が出力されたら期待通りに動作していることになります。\r\n\r\n* 動作確認スクリプトの実行\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\n#=\u003e Fizz\r\n```\r\n\r\n期待通りに動いているようです。では `FizzBazz.fizz_bazz` に 5 を渡すようスクリプトを修正して実行してみます\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\n#=\u003e Bazz\r\n```\r\n\r\nこれで `FizzBazz.fizz_bazz` が期待通りに動いているのを確認できました。\r\n\r\n## 自動テストを作成する\r\n\r\n上記のテストで人間の目による動作の保証を行いました。\r\nおそらくこの段階で完成、とする方も少なくないでしょう。\r\n\r\nですがここは続いて自動テストを作成していきたいと思います。\r\n\r\n上記の `fizz_bazz_test.rb` を書き換えて **テストコード** にしていきます。\r\n\r\n### 結果をプログラムで検証する\r\n\r\n`Fizz`, `Bazz` という文字列が返ってくることを人間の目で検証しましたが、これをプログラムで検証するようにします。\r\n\r\n```diff\r\n--- a/fizz_bazz_test.rb\r\n+++ b/fizz_bazz_test.rb\r\n@@ -4,6 +4,11 @@\r\n require_relative \"fizz_bazz\"\r\n \r\n # FizzBazz.fizz_bazz の結果を受け取る\r\n-result = FizzBazz.fizz_bazz(3)\r\n-# 結果をコマンドラインに出力する\r\n-puts result\r\n+# 引数で3を渡す\r\n+num = 3\r\n+result = FizzBazz.fizz_bazz(num)\r\n+if result == \"Fizz\"\r\n+  puts \"【成功】\"\r\n+else\r\n+  puts \"【失敗】\"\r\n+end\r\n```\r\n\r\nこれで `Fizz` の確認ができるようになりました。\r\nどうせなら `Bazz` のほうも確認を一緒にできるようにします。\r\n\r\n```diff\r\n--- a/fizz_bazz_test.rb\r\n+++ b/fizz_bazz_test.rb\r\n@@ -4,6 +4,11 @@\r\n require_relative \"fizz_bazz\"\r\n \r\n # FizzBazz.fizz_bazz の結果を受け取る\r\n-result = FizzBazz.fizz_bazz(3)\r\n-# 結果をコマンドラインに出力する\r\n-puts result\r\n+# 引数で3を渡す\r\n+num1 = 3\r\n+result1 = FizzBazz.fizz_bazz(num1)\r\n+if result1 == \"Fizz\"\r\n+  puts \"【成功】\"\r\n+else\r\n+  puts \"【失敗】\"\r\n+end\r\n+\r\n+# 引数で5を渡す\r\n+num2 = 5\r\n+result2 = FizzBazz.fizz_bazz(num2)\r\n+if result2 == \"Bazz\"\r\n+  puts \"【成功】\"\r\n+else\r\n+  puts \"【失敗】\"\r\n+end\r\n```\r\n\r\nこれで動作確認スクリプトを実行します。\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\n【成功】\r\n【成功】\r\n```\r\n\r\n人間の目でも動作が正しく動いているのが一目で分かるようになりました。\r\n検証もプログラムがしてくれるようになりました。\r\n\r\nこれで **自動テストの作成ができました。**\r\n\r\n### 自動テストの結果を見やすくする\r\n\r\nこのままでも自動テストとしては良いのですがまだいくつか問題があります。\r\n例えば今の状況でもし誰かが `Bazz` という文字列を `bazz` に変えたとします。\r\nそのとき自動テストを実行すると\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\n【成功】\r\n【失敗】\r\n```\r\n\r\nと出力されるだけです。何が失敗したのか、テストコードをきちんと読んでいかないと分かりません。\r\nそこで **出力される結果から成功/失敗の結果や原因がある程度絞り込める** ようにしたいと思います。\r\n\r\n#### 出力結果に条件と期待値を出す\r\n\r\n以下の情報を結果に出力するようにテストコードを修正します。\r\n* テストケースの条件\r\n* 検証する内容\r\n\r\n```diff\r\n--- a/fizz_bazz_test.rb\r\n+++ b/fizz_bazz_test.rb\r\n@@ -4,20 +4,24 @@\r\n require_relative \"fizz_bazz\"\r\n \r\n # FizzBazz.fizz_bazz の結果を受け取る\r\n-# 引数で3を渡す\r\n+puts \"(引数に3を渡すとき)\"\r\n num1 = 3\r\n result1 = FizzBazz.fizz_bazz(num1)\r\n+puts \"  Fizzの文字列が返ること\" # 結果を見やすいように空白スペースを先頭に入れる\r\n if result1 == \"Fizz\"\r\n-  puts \"【成功】\"\r\n+  puts \"    【成功】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n else\r\n-  puts \"【失敗】\"\r\n+  puts \"    【失敗】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+  puts \"    実行結果: #{result1}\" # 結果を見やすいように空白スペースを先頭に入れる\r\n end\r\n \r\n-# 引数で5を渡す\r\n+puts \"(引数に5を渡すとき)\"\r\n num2 = 5\r\n result2 = FizzBazz.fizz_bazz(num2)\r\n+puts \"  Bazzの文字列が返ること\" # 結果を見やすいように空白スペースを先頭に入れる\r\n if result2 == \"Bazz\"\r\n-  puts \"【成功】\"\r\n+  puts \"    【成功】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n else\r\n-  puts \"【失敗】\"\r\n+  puts \"    【失敗】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+  puts \"    実行結果: #{result2}\" # 結果を見やすいように空白スペースを先頭に入れる\r\n end\r\n```\r\n\r\nこれでテストを実行してみると以下のように結果が出力されます。\r\n\r\n* 成功するとき\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\n(引数に3を渡すとき)\r\n  Fizzの文字列が返ること\r\n    【成功】\r\n(引数に5を渡すとき)\r\n  Bazzの文字列が返ること\r\n    【成功】\r\n```\r\n\r\n* Bazzがbazzになっているとき(失敗したとき)\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\n(引数に3を渡すとき)\r\n  Fizzの文字列が返ること\r\n    【成功】\r\n(引数に5を渡すとき)\r\n  Bazzの文字列が返ること\r\n    【失敗】\r\n    実行結果: bazz\r\n```\r\n\r\nこれでかなり分かりやすい結果になったかと思います。\r\n\r\n#### テストするクラスやメソッドも出力する\r\n\r\n今回は `FizzBazz` クラスの `.fizz_bazz` メソッドしかテストしていませんが、\r\n本来であればもっと複数のクラス、複数のメソッドをテストすることになると思います。\r\n\r\nそうした時に **今どのクラスのどのメソッドのテストしているか** も一緒に出力するようにしておいたほうが、より分かりやすくて良いでしょう。\r\n以下のようにコードを修正します。\r\n\r\n```diff\r\n--- a/fizz_bazz_test.rb\r\n+++ b/fizz_bazz_test.rb\r\n@@ -3,25 +3,26 @@\r\n # FizzBazzクラスを相対パスで読み込む\r\n require_relative \"fizz_bazz\"\r\n \r\n-# FizzBazz.fizz_bazz の結果を受け取る\r\n-puts \"(引数に3を渡すとき)\"\r\n+puts \"FizzBazzクラスをテストする\"\r\n+puts \"  .fizz_bazz メソッドをテストする\"\r\n+puts \"    (引数に3を渡すとき)\"\r\n num1 = 3\r\n result1 = FizzBazz.fizz_bazz(num1)\r\n-puts \"  Fizzの文字列が返ること\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+puts \"      Fizzの文字列が返ること\"\r\n if result1 == \"Fizz\"\r\n-  puts \"    【成功】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+  puts \"        【成功】\"\r\n else\r\n-  puts \"    【失敗】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n-  puts \"    実行結果: #{result1}\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+  puts \"        【失敗】\"\r\n+  puts \"        実行結果: #{result1}\"\r\n end\r\n \r\n-puts \"(引数に5を渡すとき)\"\r\n+puts \"    (引数に5を渡すとき)\"\r\n num2 = 5\r\n result2 = FizzBazz.fizz_bazz(num2)\r\n-puts \"  Bazzの文字列が返ること\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+puts \"      Bazzの文字列が返ること\"\r\n if result2 == \"Bazz\"\r\n-  puts \"    【成功】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+  puts \"        【成功】\"\r\n else\r\n-  puts \"    【失敗】\" # 結果を見やすいように空白スペースを先頭に入れる\r\n-  puts \"    実行結果: #{result2}\" # 結果を見やすいように空白スペースを先頭に入れる\r\n+  puts \"        【失敗】\"\r\n+  puts \"        実行結果: #{result2}\"\r\n end\r\n```\r\n\r\nこれでテストを実行してみると以下のように結果が出力されます。\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\nFizzBazzクラスをテストする\r\n  .fizz_bazz メソッドをテストする\r\n    (引数に3を渡すとき)\r\n      Fizzの文字列が返ること\r\n        【成功】\r\n    (引数に5を渡すとき)\r\n      Bazzの文字列が返ること\r\n        【成功】\r\n```\r\n\r\n\r\nこれで自動テストがさらに良くなりました！！\r\n\r\n## 完成品\r\n\r\n最終的に以下の **プロダクトコード** と **テストコード** が出来ました。\r\nこれで　`FizzBazz.fizz_bazz` も安泰ですね！(大げさ)\r\n\r\n* プロダクトコード\r\n\r\n```fizz_bazz.rb\r\nclass FizzBazz\r\n  def self.fizz_bazz(num)\r\n    if num % 3 == 0\r\n      \"Fizz\"\r\n    elsif num % 5 == 0\r\n      \"Bazz\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n* テストコード\r\n\r\n\r\n```fizz_bazz_test.rb\r\n#! /usr/bin/ruby\r\n\r\n# FizzBazzクラスを相対パスで読み込む\r\nrequire_relative \"fizz_bazz\"\r\n\r\nputs \"FizzBazzクラスをテストする\"\r\nputs \"  .fizz_bazz メソッドをテストする\"\r\nputs \"    (引数に3を渡すとき)\"\r\nnum1 = 3\r\nresult1 = FizzBazz.fizz_bazz(num1)\r\nputs \"      Fizzの文字列が返ること\"\r\nif result1 == \"Fizz\"\r\n  puts \"        【成功】\"\r\nelse\r\n  puts \"        【失敗】\"\r\n  puts \"        実行結果: #{result1}\"\r\nend\r\n\r\nputs \"    (引数に5を渡すとき)\"\r\nnum2 = 5\r\nputs \"      Bazzの文字列が返ること\"\r\nresult2 = FizzBazz.fizz_bazz(num2)\r\nif result2 == \"Bazz\"\r\n  puts \"        【成功】\"\r\nelse\r\n  puts \"        【失敗】\"\r\n  puts \"        実行結果: #{result2}\"\r\nend\r\n```\r\n\r\n* 実行方法と結果\r\n\r\n```shell\r\n$ ruby fizz_bazz_test.rb\r\nFizzBazzクラスをテストする\r\n  .fizz_bazz メソッドをテストする\r\n    (引数に3を渡すとき)\r\n      Fizzの文字列が返ること\r\n        【成功】\r\n    (引数に5を渡すとき)\r\n      Bazzの文字列が返ること\r\n        【成功】\r\n```\r\n\r\n## 挑戦\r\n\r\n練習で以下に挑戦をしてみましょう。\r\n\r\n* `FizzBazz.fizz_bazz` を 3,5のどちらの倍数でもない数値が渡されたら、数値をそのまま返すようにする\r\n* 上記のテストコードも実装する\r\n\r\n## まとめ\r\n\r\n`RSpec` などのテストフレームワークなどを使わずに自動テストを実装を書いてみましたがいかがでしたでしょうか。\r\n\r\n本記事で記載したテストコードはあくまでも最低限の例であり、**良いテストコード** とは到底いえないものです。\r\nそれでも自動テストとは一体どんなものなのかを何となくでも分かってもらえたらと思い記載しました。\r\n\r\nまず最初の一歩として、上記のようなテストコードを書いてみて自動テストの壁をなくしていただければと思います。\r\n\r\n### 試せるブランチ\r\n\r\n[こちらのブランチ](https://gitlab.com/toririn/test_tyou_nyumon)に今回のコードを置いています。\r\nもし興味や勉強をしてみたい、などあればご利用ください。例えば\r\n\r\n* もっとメンテナンス性の良いテストコードを書く\r\n* 結果をより分かりやすい文章で記載する\r\n* テストの実行時間をもっと早くする…etc\r\n\r\nといったことをこちらのブランチから試してみると良いかもしれません。\r\n\r\n## 付録\r\n\r\n### `RSpec` でテストコードを書き換える\r\n\r\n`RSpec` だと本記事のテストコードはどのようになるのかを記載します。\r\n`RSpec` の導入方法などは別記事などを見てご確認ください。\r\n\r\n簡単に結果だけ記載しておきます。\r\n\r\n* `RSpec` はファイル名の末尾を `_spec` にしておくと自動で読み込みなどをしてくれるためファイル名を修正しています\r\n\r\n```fizz_bazz_spec.rb\r\nrequire 'rspec'\r\nrequire_relative \"fizz_bazz\"\r\n\r\nRSpec.describe \"FizzBazzクラスをテストする\" do\r\n  describe \".fizz_bazz メソッドをテストする\" do\r\n    context \"(引数に3を渡すとき)\" do\r\n      it \"Fizzの文字列が返ること\" do\r\n        num = 3\r\n        expect(FizzBazz.fizz_bazz(num)).to eq \"Fizz\"\r\n      end\r\n    end\r\n\r\n    context \"(引数に5を渡すとき)\" do\r\n      it \"Bazzの文字列が返ること\" do\r\n        num = 5\r\n        expect(FizzBazz.fizz_bazz(num)).to eq \"Bazz\"\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n* 実行方法と出力結果\r\n\r\n```\r\n$ rspec fizz_bazz_spec.rb -f d\r\nFizzBazzクラスをテストする\r\n  .fizz_bazz メソッドをテストする\r\n    (引数に3を渡すとき)\r\n      Fizzの文字列が返ること\r\n    (引数に5を渡すとき)\r\n      Bazzの文字列が返ること\r\n```\r\n\r\n#### もう少し `RSpec` っぽく\r\n\r\n\r\n```fizz_bazz_spec.rb\r\nrequire 'rspec'\r\nrequire_relative \"fizz_bazz\"\r\n\r\nRSpec.describe FizzBazz do\r\n  describe \".fizz_bazz\" do\r\n    subject { FizzBazz.fizz_bazz(num) }\r\n    context \"(When num is given 3)\" do\r\n      let(:num) { 3 }\r\n      it { is_expected.to eq \"Fizz\" }\r\n    end\r\n\r\n    context \"(When num is given 5)\" do\r\n      let(:num) { 5 }\r\n      it { is_expected.to eq \"Bazz\" }\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n* 実行方法と出力結果\r\n\r\n```\r\n$ rspec fizz_bazz_spec.rb -f d\r\nFizzBazz\r\n  .fizz_bazz\r\n    (When num is given 3)\r\n      should eq \"Fizz\"\r\n    (When num is given 5)\r\n      should eq \"Bazz\"\r\n```\r\n\r\n\r\n### 挑戦の模擬回答\r\n\r\n* プロダクトコード\r\n\r\n```fizz_bazz.rb\r\nclass FizzBazz\r\n  def self.fizz_bazz(num)\r\n    if num % 3 == 0\r\n      \"Fizz\"\r\n    elsif num % 5 == 0\r\n      \"Bazz\"\r\n    else\r\n      num\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n* テストコード\r\n\r\n\r\n```fizz_bazz_test.rb\r\n#! /usr/bin/ruby\r\n\r\n# FizzBazzクラスを相対パスで読み込む\r\nrequire_relative \"fizz_bazz\"\r\n\r\nputs \"FizzBazzクラスをテストする\"\r\nputs \"  .fizz_bazz メソッドをテストする\"\r\nputs \"    (引数に3を渡すとき)\"\r\nnum1 = 3\r\nresult1 = FizzBazz.fizz_bazz(num1)\r\nputs \"      Fizzの文字列が返ること\"\r\nif result1 == \"Fizz\"\r\n  puts \"        【成功】\"\r\nelse\r\n  puts \"        【失敗】\"\r\n  puts \"        実行結果: #{result1}\"\r\nend\r\n\r\nputs \"    (引数に5を渡すとき)\"\r\nnum2 = 5\r\nresult2 = FizzBazz.fizz_bazz(num2)\r\nputs \"      Bazzの文字列が返ること\"\r\nif result2 == \"Bazz\"\r\n  puts \"        【成功】\"\r\nelse\r\n  puts \"        【失敗】\"\r\n  puts \"        実行結果: #{result2}\"\r\nend\r\n\r\nputs \"    (引数に7を渡すとき)\"\r\nnum3 = 7\r\nresult3 = FizzBazz.fizz_bazz(num3)\r\nputs \"      7が返ること\"\r\nif result3 == 7\r\n  puts \"        【成功】\"\r\nelse\r\n  puts \"        【失敗】\"\r\n  puts \"        実行結果: #{result3}\"\r\nend\r\n```\r\n\r\n* 実行方法と結果\r\n\r\n```\r\n$ ruby fizz_bazz_test.rb\r\nFizzBazzクラスをテストする\r\n  .fizz_bazz メソッドをテストする\r\n    (引数に3を渡すとき)\r\n      Fizzの文字列が返ること\r\n        【成功】\r\n    (引数に5を渡すとき)\r\n      Bazzの文字列が返ること\r\n        【成功】\r\n    (引数に7を渡すとき)\r\n      7が返ること\r\n        【成功】\r\n```\r\n","createdAt":"2022/07/31 16:01:01","loveReactionCount":"0","updatedAt":"2022/07/31 16:01:01"}